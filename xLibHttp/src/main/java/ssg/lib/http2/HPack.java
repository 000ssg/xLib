/*
 * The MIT License
 *
 * Copyright 2020 Sergey Sidorov/000ssg@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package ssg.lib.http2;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import ssg.lib.common.Huffman;
import static ssg.lib.common.Huffman.buildTree;

/**
 * Implementation of HPACK: Header Compression for HTTP/2 at
 * https://tools.ietf.org/html/rfc7541
 *
 * @author 000ssg
 */
public class HPack {

    public boolean DEBUG = false;

    /*
RFC 7541                          HPACK                         May 2015
          +-------+-----------------------------+---------------+
          | Index | Header Name                 | Header Value  |
          +-------+-----------------------------+---------------+
          | 1     | :authority                  |               |
          | 2     | :method                     | GET           |
          | 3     | :method                     | POST          |
          | 4     | :path                       | /             |
          | 5     | :path                       | /index.html   |
          | 6     | :scheme                     | http          |
          | 7     | :scheme                     | https         |
          | 8     | :status                     | 200           |
          | 9     | :status                     | 204           |
          | 10    | :status                     | 206           |
          | 11    | :status                     | 304           |
          | 12    | :status                     | 400           |
          | 13    | :status                     | 404           |
          | 14    | :status                     | 500           |
          | 15    | accept-charset              |               |
          | 16    | accept-encoding             | gzip, deflate |
          | 17    | accept-language             |               |
          | 18    | accept-ranges               |               |
          | 19    | accept                      |               |
          | 20    | access-control-allow-origin |               |
          | 21    | age                         |               |
          | 22    | allow                       |               |
          | 23    | authorization               |               |
          | 24    | cache-control               |               |
          | 25    | content-disposition         |               |
          | 26    | content-encoding            |               |
          | 27    | content-language            |               |
          | 28    | content-length              |               |
          | 29    | content-location            |               |
          | 30    | content-range               |               |
          | 31    | content-type                |               |
          | 32    | cookie                      |               |
          | 33    | date                        |               |
          | 34    | etag                        |               |
          | 35    | expect                      |               |
          | 36    | expires                     |               |
          | 37    | from                        |               |
          | 38    | host                        |               |
          | 39    | if-match                    |               |
          | 40    | if-modified-since           |               |
          | 41    | if-none-match               |               |
          | 42    | if-range                    |               |
          | 43    | if-unmodified-since         |               |
          | 44    | last-modified               |               |
          | 45    | link                        |               |
          | 46    | location                    |               |
          | 47    | max-forwards                |               |
          | 48    | proxy-authenticate          |               |
          | 49    | proxy-authorization         |               |
          | 50    | range                       |               |
          | 51    | referer                     |               |
          | 52    | refresh                     |               |
          | 53    | retry-after                 |               |
          | 54    | server                      |               |
          | 55    | set-cookie                  |               |
          | 56    | strict-transport-security   |               |
          | 57    | transfer-encoding           |               |
          | 58    | user-agent                  |               |
          | 59    | vary                        |               |
          | 60    | via                         |               |
          | 61    | www-authenticate            |               |
          +-------+-----------------------------+---------------+
    
     */
    static final String[][] staticTable = new String[][]{
        {},
        {":authority", null}, // 1
        {":method", "GET"}, // 2
        {":method", "POST"}, // 3
        {":path", "/"}, // 4
        {":path", "/index.html"}, // 5
        {":scheme", "http"}, // 6
        {":scheme", "https"}, // 7
        {":status", "200"}, // 8
        {":status", "204"}, // 9
        {":status", "206"}, // 10
        {":status", "304"}, // 11
        {":status", "400"}, // 12
        {":status", "404"}, // 13
        {":status", "500"}, // 14
        {"accept-charset", null}, // 15
        {"accept-encoding", "gzip, deflate"}, // 16
        {"accept-language", null}, // 17
        {"accept-ranges", null}, // 18
        {"accept", null}, // 19
        {"access-control-allow-origin", null}, // 20
        {"age", null}, // 21
        {"allow", null}, // 22
        {"authorization", null}, // 23
        {"cache-control", null}, // 24
        {"content-disposition", null}, // 25
        {"content-encoding", null}, // 26
        {"content-language", null}, // 27
        {"content-length", null}, // 28
        {"content-location", null}, // 29
        {"content-range", null}, // 30
        {"content-type", null}, // 31
        {"cookie", null}, // 32
        {"date", null}, // 33
        {"etag", null}, // 34
        {"expect", null}, // 35
        {"expires", null}, // 36
        {"from", null}, // 37
        {"host", null}, // 38
        {"if-match", null}, // 39
        {"if-modified-since", null}, // 40
        {"if-none-match", null}, // 41
        {"if-range", null}, // 42
        {"if-unmodified-since", null}, // 43
        {"last-modified", null}, // 44
        {"link", null}, // 45
        {"location", null}, // 46
        {"max-forwards", null}, // 47
        {"proxy-authenticate", null}, // 48
        {"proxy-authorization", null}, // 49
        {"range", null}, // 50
        {"referer", null}, // 51
        {"refresh", null}, // 52
        {"retry-after", null}, // 53
        {"server", null}, // 54
        {"set-cookie", null}, // 55
        {"strict-transport-security", null}, // 56
        {"transfer-encoding", null}, // 57
        {"user-agent", null}, // 58
        {"vary", null}, // 59
        {"via", null}, // 60
        {"www-authenticate", null} // 61
    };

    /*
RFC 7541                          HPACK                         May 2015
                                                      code
                          code as bits                 as hex   len
        sym              aligned to MSB                aligned   in
                                                       to LSB   bits
       (  0)  |11111111|11000                             1ff8  [13]
       (  1)  |11111111|11111111|1011000                7fffd8  [23]
       (  2)  |11111111|11111111|11111110|0010         fffffe2  [28]
       (  3)  |11111111|11111111|11111110|0011         fffffe3  [28]
       (  4)  |11111111|11111111|11111110|0100         fffffe4  [28]
       (  5)  |11111111|11111111|11111110|0101         fffffe5  [28]
       (  6)  |11111111|11111111|11111110|0110         fffffe6  [28]
       (  7)  |11111111|11111111|11111110|0111         fffffe7  [28]
       (  8)  |11111111|11111111|11111110|1000         fffffe8  [28]
       (  9)  |11111111|11111111|11101010               ffffea  [24]
       ( 10)  |11111111|11111111|11111111|111100      3ffffffc  [30]
       ( 11)  |11111111|11111111|11111110|1001         fffffe9  [28]
       ( 12)  |11111111|11111111|11111110|1010         fffffea  [28]
       ( 13)  |11111111|11111111|11111111|111101      3ffffffd  [30]
       ( 14)  |11111111|11111111|11111110|1011         fffffeb  [28]
       ( 15)  |11111111|11111111|11111110|1100         fffffec  [28]
       ( 16)  |11111111|11111111|11111110|1101         fffffed  [28]
       ( 17)  |11111111|11111111|11111110|1110         fffffee  [28]
       ( 18)  |11111111|11111111|11111110|1111         fffffef  [28]
       ( 19)  |11111111|11111111|11111111|0000         ffffff0  [28]
       ( 20)  |11111111|11111111|11111111|0001         ffffff1  [28]
       ( 21)  |11111111|11111111|11111111|0010         ffffff2  [28]
       ( 22)  |11111111|11111111|11111111|111110      3ffffffe  [30]
       ( 23)  |11111111|11111111|11111111|0011         ffffff3  [28]
       ( 24)  |11111111|11111111|11111111|0100         ffffff4  [28]
       ( 25)  |11111111|11111111|11111111|0101         ffffff5  [28]
       ( 26)  |11111111|11111111|11111111|0110         ffffff6  [28]
       ( 27)  |11111111|11111111|11111111|0111         ffffff7  [28]
       ( 28)  |11111111|11111111|11111111|1000         ffffff8  [28]
       ( 29)  |11111111|11111111|11111111|1001         ffffff9  [28]
       ( 30)  |11111111|11111111|11111111|1010         ffffffa  [28]
       ( 31)  |11111111|11111111|11111111|1011         ffffffb  [28]
   ' ' ( 32)  |010100                                       14  [ 6]
   '!' ( 33)  |11111110|00                                 3f8  [10]
   '"' ( 34)  |11111110|01                                 3f9  [10]
   '#' ( 35)  |11111111|1010                               ffa  [12]
   '$' ( 36)  |11111111|11001                             1ff9  [13]
   '%' ( 37)  |010101                                       15  [ 6]
   '&' ( 38)  |11111000                                     f8  [ 8]
   ''' ( 39)  |11111111|010                                7fa  [11]
   '(' ( 40)  |11111110|10                                 3fa  [10]
   ')' ( 41)  |11111110|11                                 3fb  [10]
   '*' ( 42)  |11111001                                     f9  [ 8]
   '+' ( 43)  |11111111|011                                7fb  [11]
   ',' ( 44)  |11111010                                     fa  [ 8]
   '-' ( 45)  |010110                                       16  [ 6]
   '.' ( 46)  |010111                                       17  [ 6]
   '/' ( 47)  |011000                                       18  [ 6]
   '0' ( 48)  |00000                                         0  [ 5]
   '1' ( 49)  |00001                                         1  [ 5]
   '2' ( 50)  |00010                                         2  [ 5]
   '3' ( 51)  |011001                                       19  [ 6]
   '4' ( 52)  |011010                                       1a  [ 6]
   '5' ( 53)  |011011                                       1b  [ 6]
   '6' ( 54)  |011100                                       1c  [ 6]
   '7' ( 55)  |011101                                       1d  [ 6]
   '8' ( 56)  |011110                                       1e  [ 6]
   '9' ( 57)  |011111                                       1f  [ 6]
   ':' ( 58)  |1011100                                      5c  [ 7]
   ';' ( 59)  |11111011                                     fb  [ 8]
   '<' ( 60)  |11111111|1111100                           7ffc  [15]
   '=' ( 61)  |100000                                       20  [ 6]
   '>' ( 62)  |11111111|1011                               ffb  [12]
   '?' ( 63)  |11111111|00                                 3fc  [10]
   '@' ( 64)  |11111111|11010                             1ffa  [13]
   'A' ( 65)  |100001                                       21  [ 6]
   'B' ( 66)  |1011101                                      5d  [ 7]
   'C' ( 67)  |1011110                                      5e  [ 7]
   'D' ( 68)  |1011111                                      5f  [ 7]
   'E' ( 69)  |1100000                                      60  [ 7]
   'F' ( 70)  |1100001                                      61  [ 7]
   'G' ( 71)  |1100010                                      62  [ 7]
   'H' ( 72)  |1100011                                      63  [ 7]
   'I' ( 73)  |1100100                                      64  [ 7]
   'J' ( 74)  |1100101                                      65  [ 7]
   'K' ( 75)  |1100110                                      66  [ 7]
   'L' ( 76)  |1100111                                      67  [ 7]
   'M' ( 77)  |1101000                                      68  [ 7]
   'N' ( 78)  |1101001                                      69  [ 7]
   'O' ( 79)  |1101010                                      6a  [ 7]
   'P' ( 80)  |1101011                                      6b  [ 7]
   'Q' ( 81)  |1101100                                      6c  [ 7]
   'R' ( 82)  |1101101                                      6d  [ 7]
   'S' ( 83)  |1101110                                      6e  [ 7]
   'T' ( 84)  |1101111                                      6f  [ 7]
   'U' ( 85)  |1110000                                      70  [ 7]
   'V' ( 86)  |1110001                                      71  [ 7]
   'W' ( 87)  |1110010                                      72  [ 7]
   'X' ( 88)  |11111100                                     fc  [ 8]
   'Y' ( 89)  |1110011                                      73  [ 7]
   'Z' ( 90)  |11111101                                     fd  [ 8]
   '[' ( 91)  |11111111|11011                             1ffb  [13]
   '\' ( 92)  |11111111|11111110|000                     7fff0  [19]
   ']' ( 93)  |11111111|11100                             1ffc  [13]
   '^' ( 94)  |11111111|111100                            3ffc  [14]
   '_' ( 95)  |100010                                       22  [ 6]
   '`' ( 96)  |11111111|1111101                           7ffd  [15]
   'a' ( 97)  |00011                                         3  [ 5]
   'b' ( 98)  |100011                                       23  [ 6]
   'c' ( 99)  |00100                                         4  [ 5]
   'd' (100)  |100100                                       24  [ 6]
   'e' (101)  |00101                                         5  [ 5]
   'f' (102)  |100101                                       25  [ 6]
   'g' (103)  |100110                                       26  [ 6]
   'h' (104)  |100111                                       27  [ 6]
   'i' (105)  |00110                                         6  [ 5]
   'j' (106)  |1110100                                      74  [ 7]
   'k' (107)  |1110101                                      75  [ 7]
   'l' (108)  |101000                                       28  [ 6]
   'm' (109)  |101001                                       29  [ 6]
   'n' (110)  |101010                                       2a  [ 6]
   'o' (111)  |00111                                         7  [ 5]
   'p' (112)  |101011                                       2b  [ 6]
   'q' (113)  |1110110                                      76  [ 7]
   'r' (114)  |101100                                       2c  [ 6]
   's' (115)  |01000                                         8  [ 5]
   't' (116)  |01001                                         9  [ 5]
   'u' (117)  |101101                                       2d  [ 6]
   'v' (118)  |1110111                                      77  [ 7]
   'w' (119)  |1111000                                      78  [ 7]
   'x' (120)  |1111001                                      79  [ 7]
   'y' (121)  |1111010                                      7a  [ 7]
   'z' (122)  |1111011                                      7b  [ 7]
   '{' (123)  |11111111|1111110                           7ffe  [15]
   '|' (124)  |11111111|100                                7fc  [11]
   '}' (125)  |11111111|111101                            3ffd  [14]
   '~' (126)  |11111111|11101                             1ffd  [13]
       (127)  |11111111|11111111|11111111|1100         ffffffc  [28]
       (128)  |11111111|11111110|0110                    fffe6  [20]
       (129)  |11111111|11111111|010010                 3fffd2  [22]
       (130)  |11111111|11111110|0111                    fffe7  [20]
       (131)  |11111111|11111110|1000                    fffe8  [20]
       (132)  |11111111|11111111|010011                 3fffd3  [22]
       (133)  |11111111|11111111|010100                 3fffd4  [22]
       (134)  |11111111|11111111|010101                 3fffd5  [22]
       (135)  |11111111|11111111|1011001                7fffd9  [23]
       (136)  |11111111|11111111|010110                 3fffd6  [22]
       (137)  |11111111|11111111|1011010                7fffda  [23]
       (138)  |11111111|11111111|1011011                7fffdb  [23]
       (139)  |11111111|11111111|1011100                7fffdc  [23]
       (140)  |11111111|11111111|1011101                7fffdd  [23]
       (141)  |11111111|11111111|1011110                7fffde  [23]
       (142)  |11111111|11111111|11101011               ffffeb  [24]
       (143)  |11111111|11111111|1011111                7fffdf  [23]
       (144)  |11111111|11111111|11101100               ffffec  [24]
       (145)  |11111111|11111111|11101101               ffffed  [24]
       (146)  |11111111|11111111|010111                 3fffd7  [22]
       (147)  |11111111|11111111|1100000                7fffe0  [23]
       (148)  |11111111|11111111|11101110               ffffee  [24]
       (149)  |11111111|11111111|1100001                7fffe1  [23]
       (150)  |11111111|11111111|1100010                7fffe2  [23]
       (151)  |11111111|11111111|1100011                7fffe3  [23]
       (152)  |11111111|11111111|1100100                7fffe4  [23]
       (153)  |11111111|11111110|11100                  1fffdc  [21]
       (154)  |11111111|11111111|011000                 3fffd8  [22]
       (155)  |11111111|11111111|1100101                7fffe5  [23]
       (156)  |11111111|11111111|011001                 3fffd9  [22]
       (157)  |11111111|11111111|1100110                7fffe6  [23]
       (158)  |11111111|11111111|1100111                7fffe7  [23]
       (159)  |11111111|11111111|11101111               ffffef  [24]
       (160)  |11111111|11111111|011010                 3fffda  [22]
       (161)  |11111111|11111110|11101                  1fffdd  [21]
       (162)  |11111111|11111110|1001                    fffe9  [20]
       (163)  |11111111|11111111|011011                 3fffdb  [22]
       (164)  |11111111|11111111|011100                 3fffdc  [22]
       (165)  |11111111|11111111|1101000                7fffe8  [23]
       (166)  |11111111|11111111|1101001                7fffe9  [23]
       (167)  |11111111|11111110|11110                  1fffde  [21]
       (168)  |11111111|11111111|1101010                7fffea  [23]
       (169)  |11111111|11111111|011101                 3fffdd  [22]
       (170)  |11111111|11111111|011110                 3fffde  [22]
       (171)  |11111111|11111111|11110000               fffff0  [24]
       (172)  |11111111|11111110|11111                  1fffdf  [21]
       (173)  |11111111|11111111|011111                 3fffdf  [22]
       (174)  |11111111|11111111|1101011                7fffeb  [23]
       (175)  |11111111|11111111|1101100                7fffec  [23]
       (176)  |11111111|11111111|00000                  1fffe0  [21]
       (177)  |11111111|11111111|00001                  1fffe1  [21]
       (178)  |11111111|11111111|100000                 3fffe0  [22]
       (179)  |11111111|11111111|00010                  1fffe2  [21]
       (180)  |11111111|11111111|1101101                7fffed  [23]
       (181)  |11111111|11111111|100001                 3fffe1  [22]
       (182)  |11111111|11111111|1101110                7fffee  [23]
       (183)  |11111111|11111111|1101111                7fffef  [23]
       (184)  |11111111|11111110|1010                    fffea  [20]
       (185)  |11111111|11111111|100010                 3fffe2  [22]
       (186)  |11111111|11111111|100011                 3fffe3  [22]
       (187)  |11111111|11111111|100100                 3fffe4  [22]
       (188)  |11111111|11111111|1110000                7ffff0  [23]
       (189)  |11111111|11111111|100101                 3fffe5  [22]
       (190)  |11111111|11111111|100110                 3fffe6  [22]
       (191)  |11111111|11111111|1110001                7ffff1  [23]
       (192)  |11111111|11111111|11111000|00           3ffffe0  [26]
       (193)  |11111111|11111111|11111000|01           3ffffe1  [26]
       (194)  |11111111|11111110|1011                    fffeb  [20]
       (195)  |11111111|11111110|001                     7fff1  [19]
       (196)  |11111111|11111111|100111                 3fffe7  [22]
       (197)  |11111111|11111111|1110010                7ffff2  [23]
       (198)  |11111111|11111111|101000                 3fffe8  [22]
       (199)  |11111111|11111111|11110110|0            1ffffec  [25]
       (200)  |11111111|11111111|11111000|10           3ffffe2  [26]
       (201)  |11111111|11111111|11111000|11           3ffffe3  [26]
       (202)  |11111111|11111111|11111001|00           3ffffe4  [26]
       (203)  |11111111|11111111|11111011|110          7ffffde  [27]
       (204)  |11111111|11111111|11111011|111          7ffffdf  [27]
       (205)  |11111111|11111111|11111001|01           3ffffe5  [26]
       (206)  |11111111|11111111|11110001               fffff1  [24]
       (207)  |11111111|11111111|11110110|1            1ffffed  [25]
       (208)  |11111111|11111110|010                     7fff2  [19]
       (209)  |11111111|11111111|00011                  1fffe3  [21]
       (210)  |11111111|11111111|11111001|10           3ffffe6  [26]
       (211)  |11111111|11111111|11111100|000          7ffffe0  [27]
       (212)  |11111111|11111111|11111100|001          7ffffe1  [27]
       (213)  |11111111|11111111|11111001|11           3ffffe7  [26]
       (214)  |11111111|11111111|11111100|010          7ffffe2  [27]
       (215)  |11111111|11111111|11110010               fffff2  [24]
       (216)  |11111111|11111111|00100                  1fffe4  [21]
       (217)  |11111111|11111111|00101                  1fffe5  [21]
       (218)  |11111111|11111111|11111010|00           3ffffe8  [26]
       (219)  |11111111|11111111|11111010|01           3ffffe9  [26]
       (220)  |11111111|11111111|11111111|1101         ffffffd  [28]
       (221)  |11111111|11111111|11111100|011          7ffffe3  [27]
       (222)  |11111111|11111111|11111100|100          7ffffe4  [27]
       (223)  |11111111|11111111|11111100|101          7ffffe5  [27]
       (224)  |11111111|11111110|1100                    fffec  [20]
       (225)  |11111111|11111111|11110011               fffff3  [24]
       (226)  |11111111|11111110|1101                    fffed  [20]
       (227)  |11111111|11111111|00110                  1fffe6  [21]
       (228)  |11111111|11111111|101001                 3fffe9  [22]
       (229)  |11111111|11111111|00111                  1fffe7  [21]
       (230)  |11111111|11111111|01000                  1fffe8  [21]
       (231)  |11111111|11111111|1110011                7ffff3  [23]
       (232)  |11111111|11111111|101010                 3fffea  [22]
       (233)  |11111111|11111111|101011                 3fffeb  [22]
       (234)  |11111111|11111111|11110111|0            1ffffee  [25]
       (235)  |11111111|11111111|11110111|1            1ffffef  [25]
       (236)  |11111111|11111111|11110100               fffff4  [24]
       (237)  |11111111|11111111|11110101               fffff5  [24]
       (238)  |11111111|11111111|11111010|10           3ffffea  [26]
       (239)  |11111111|11111111|1110100                7ffff4  [23]
       (240)  |11111111|11111111|11111010|11           3ffffeb  [26]
       (241)  |11111111|11111111|11111100|110          7ffffe6  [27]
       (242)  |11111111|11111111|11111011|00           3ffffec  [26]
       (243)  |11111111|11111111|11111011|01           3ffffed  [26]
       (244)  |11111111|11111111|11111100|111          7ffffe7  [27]
       (245)  |11111111|11111111|11111101|000          7ffffe8  [27]
       (246)  |11111111|11111111|11111101|001          7ffffe9  [27]
       (247)  |11111111|11111111|11111101|010          7ffffea  [27]
       (248)  |11111111|11111111|11111101|011          7ffffeb  [27]
       (249)  |11111111|11111111|11111111|1110         ffffffe  [28]
       (250)  |11111111|11111111|11111101|100          7ffffec  [27]
       (251)  |11111111|11111111|11111101|101          7ffffed  [27]
       (252)  |11111111|11111111|11111101|110          7ffffee  [27]
       (253)  |11111111|11111111|11111101|111          7ffffef  [27]
       (254)  |11111111|11111111|11111110|000          7fffff0  [27]
       (255)  |11111111|11111111|11111011|10           3ffffee  [26]
   EOS (256)  |11111111|11111111|11111111|111111      3fffffff  [30]
     */
    public static class HPackHuffman extends Huffman {

        static Map<Integer, int[]> dictionary = Collections.unmodifiableMap(new LinkedHashMap<Integer, int[]>() {
            {
                put(0, new int[]{0, 13, 0b1111111111000}); // 0
                put(1, new int[]{1, 23, 0b11111111111111111011000}); // 1
                put(2, new int[]{2, 28, 0b1111111111111111111111100010}); // 2
                put(3, new int[]{3, 28, 0b1111111111111111111111100011}); // 3
                put(4, new int[]{4, 28, 0b1111111111111111111111100100}); // 4
                put(5, new int[]{5, 28, 0b1111111111111111111111100101}); // 5
                put(6, new int[]{6, 28, 0b1111111111111111111111100110}); // 6
                put(7, new int[]{7, 28, 0b1111111111111111111111100111}); // 7
                put(8, new int[]{8, 28, 0b1111111111111111111111101000}); // 8
                put(9, new int[]{9, 24, 0b111111111111111111101010}); // 9
                put(10, new int[]{10, 30, 0b111111111111111111111111111100}); // 10
                put(11, new int[]{11, 28, 0b1111111111111111111111101001}); // 11
                put(12, new int[]{12, 28, 0b1111111111111111111111101010}); // 12
                put(13, new int[]{13, 30, 0b111111111111111111111111111101}); // 13
                put(14, new int[]{14, 28, 0b1111111111111111111111101011}); // 14
                put(15, new int[]{15, 28, 0b1111111111111111111111101100}); // 15
                put(16, new int[]{16, 28, 0b1111111111111111111111101101}); // 16
                put(17, new int[]{17, 28, 0b1111111111111111111111101110}); // 17
                put(18, new int[]{18, 28, 0b1111111111111111111111101111}); // 18
                put(19, new int[]{19, 28, 0b1111111111111111111111110000}); // 19
                put(20, new int[]{20, 28, 0b1111111111111111111111110001}); // 20
                put(21, new int[]{21, 28, 0b1111111111111111111111110010}); // 21
                put(22, new int[]{22, 30, 0b111111111111111111111111111110}); // 22
                put(23, new int[]{23, 28, 0b1111111111111111111111110011}); // 23
                put(24, new int[]{24, 28, 0b1111111111111111111111110100}); // 24
                put(25, new int[]{25, 28, 0b1111111111111111111111110101}); // 25
                put(26, new int[]{26, 28, 0b1111111111111111111111110110}); // 26
                put(27, new int[]{27, 28, 0b1111111111111111111111110111}); // 27
                put(28, new int[]{28, 28, 0b1111111111111111111111111000}); // 28
                put(29, new int[]{29, 28, 0b1111111111111111111111111001}); // 29
                put(30, new int[]{30, 28, 0b1111111111111111111111111010}); // 30
                put(31, new int[]{31, 28, 0b1111111111111111111111111011}); // 31
                put(32, new int[]{32, 6, 0b010100}); // ' '  32
                put(33, new int[]{33, 10, 0b1111111000}); // '!'  33
                put(34, new int[]{34, 10, 0b1111111001}); // '"'  34
                put(35, new int[]{35, 12, 0b111111111010}); // '#'  35
                put(36, new int[]{36, 13, 0b1111111111001}); // '$'  36
                put(37, new int[]{37, 6, 0b010101}); // '%'  37
                put(38, new int[]{38, 8, 0b11111000}); // '&'  38
                put(39, new int[]{39, 11, 0b11111111010}); // '''  39
                put(40, new int[]{40, 10, 0b1111111010}); // '('  40
                put(41, new int[]{41, 10, 0b1111111011}); // ')'  41
                put(42, new int[]{42, 8, 0b11111001}); // '*'  42
                put(43, new int[]{43, 11, 0b11111111011}); // '+'  43
                put(44, new int[]{44, 8, 0b11111010}); // ','  44
                put(45, new int[]{45, 6, 0b010110}); // '-'  45
                put(46, new int[]{46, 6, 0b010111}); // '.'  46
                put(47, new int[]{47, 6, 0b011000}); // '/'  47
                put(48, new int[]{48, 5, 0b00000}); // '0'  48
                put(49, new int[]{49, 5, 0b00001}); // '1'  49
                put(50, new int[]{50, 5, 0b00010}); // '2'  50
                put(51, new int[]{51, 6, 0b011001}); // '3'  51
                put(52, new int[]{52, 6, 0b011010}); // '4'  52
                put(53, new int[]{53, 6, 0b011011}); // '5'  53
                put(54, new int[]{54, 6, 0b011100}); // '6'  54
                put(55, new int[]{55, 6, 0b011101}); // '7'  55
                put(56, new int[]{56, 6, 0b011110}); // '8'  56
                put(57, new int[]{57, 6, 0b011111}); // '9'  57
                put(58, new int[]{58, 7, 0b1011100}); // ':'  58
                put(59, new int[]{59, 8, 0b11111011}); // ';'  59
                put(60, new int[]{60, 15, 0b111111111111100}); // '<'  60
                put(61, new int[]{61, 6, 0b100000}); // '='  61
                put(62, new int[]{62, 12, 0b111111111011}); // '>'  62
                put(63, new int[]{63, 10, 0b1111111100}); // '?'  63
                put(64, new int[]{64, 13, 0b1111111111010}); // '@'  64
                put(65, new int[]{65, 6, 0b100001}); // 'A'  65
                put(66, new int[]{66, 7, 0b1011101}); // 'B'  66
                put(67, new int[]{67, 7, 0b1011110}); // 'C'  67
                put(68, new int[]{68, 7, 0b1011111}); // 'D'  68
                put(69, new int[]{69, 7, 0b1100000}); // 'E'  69
                put(70, new int[]{70, 7, 0b1100001}); // 'F'  70
                put(71, new int[]{71, 7, 0b1100010}); // 'G'  71
                put(72, new int[]{72, 7, 0b1100011}); // 'H'  72
                put(73, new int[]{73, 7, 0b1100100}); // 'I'  73
                put(74, new int[]{74, 7, 0b1100101}); // 'J'  74
                put(75, new int[]{75, 7, 0b1100110}); // 'K'  75
                put(76, new int[]{76, 7, 0b1100111}); // 'L'  76
                put(77, new int[]{77, 7, 0b1101000}); // 'M'  77
                put(78, new int[]{78, 7, 0b1101001}); // 'N'  78
                put(79, new int[]{79, 7, 0b1101010}); // 'O'  79
                put(80, new int[]{80, 7, 0b1101011}); // 'P'  80
                put(81, new int[]{81, 7, 0b1101100}); // 'Q'  81
                put(82, new int[]{82, 7, 0b1101101}); // 'R'  82
                put(83, new int[]{83, 7, 0b1101110}); // 'S'  83
                put(84, new int[]{84, 7, 0b1101111}); // 'T'  84
                put(85, new int[]{85, 7, 0b1110000}); // 'U'  85
                put(86, new int[]{86, 7, 0b1110001}); // 'V'  86
                put(87, new int[]{87, 7, 0b1110010}); // 'W'  87
                put(88, new int[]{88, 8, 0b11111100}); // 'X'  88
                put(89, new int[]{89, 7, 0b1110011}); // 'Y'  89
                put(90, new int[]{90, 8, 0b11111101}); // 'Z'  90
                put(91, new int[]{91, 13, 0b1111111111011}); // '['  91
                put(92, new int[]{92, 19, 0b1111111111111110000}); // '\'  92
                put(93, new int[]{93, 13, 0b1111111111100}); // ']'  93
                put(94, new int[]{94, 14, 0b11111111111100}); // '^'  94
                put(95, new int[]{95, 6, 0b100010}); // '_'  95
                put(96, new int[]{96, 15, 0b111111111111101}); // '`'  96
                put(97, new int[]{97, 5, 0b00011}); // 'a'  97
                put(98, new int[]{98, 6, 0b100011}); // 'b'  98
                put(99, new int[]{99, 5, 0b00100}); // 'c'  99
                put(100, new int[]{100, 6, 0b100100}); // 'd'  100
                put(101, new int[]{101, 5, 0b00101}); // 'e'  101
                put(102, new int[]{102, 6, 0b100101}); // 'f'  102
                put(103, new int[]{103, 6, 0b100110}); // 'g'  103
                put(104, new int[]{104, 6, 0b100111}); // 'h'  104
                put(105, new int[]{105, 5, 0b00110}); // 'i'  105
                put(106, new int[]{106, 7, 0b1110100}); // 'j'  106
                put(107, new int[]{107, 7, 0b1110101}); // 'k'  107
                put(108, new int[]{108, 6, 0b101000}); // 'l'  108
                put(109, new int[]{109, 6, 0b101001}); // 'm'  109
                put(110, new int[]{110, 6, 0b101010}); // 'n'  110
                put(111, new int[]{111, 5, 0b00111}); // 'o'  111
                put(112, new int[]{112, 6, 0b101011}); // 'p'  112
                put(113, new int[]{113, 7, 0b1110110}); // 'q'  113
                put(114, new int[]{114, 6, 0b101100}); // 'r'  114
                put(115, new int[]{115, 5, 0b01000}); // 's'  115
                put(116, new int[]{116, 5, 0b01001}); // 't'  116
                put(117, new int[]{117, 6, 0b101101}); // 'u'  117
                put(118, new int[]{118, 7, 0b1110111}); // 'v'  118
                put(119, new int[]{119, 7, 0b1111000}); // 'w'  119
                put(120, new int[]{120, 7, 0b1111001}); // 'x'  120
                put(121, new int[]{121, 7, 0b1111010}); // 'y'  121
                put(122, new int[]{122, 7, 0b1111011}); // 'z'  122
                put(123, new int[]{123, 15, 0b111111111111110}); // '{'  123
                put(124, new int[]{124, 11, 0b11111111100}); // '|'  124
                put(125, new int[]{125, 14, 0b11111111111101}); // '}'  125
                put(126, new int[]{126, 13, 0b1111111111101}); // '~'  126
                put(127, new int[]{127, 28, 0b1111111111111111111111111100}); // 127
                put(128, new int[]{128, 20, 0b11111111111111100110}); // 128
                put(129, new int[]{129, 22, 0b1111111111111111010010}); // 129
                put(130, new int[]{130, 20, 0b11111111111111100111}); // 130
                put(131, new int[]{131, 20, 0b11111111111111101000}); // 131
                put(132, new int[]{132, 22, 0b1111111111111111010011}); // 132
                put(133, new int[]{133, 22, 0b1111111111111111010100}); // 133
                put(134, new int[]{134, 22, 0b1111111111111111010101}); // 134
                put(135, new int[]{135, 23, 0b11111111111111111011001}); // 135
                put(136, new int[]{136, 22, 0b1111111111111111010110}); // 136
                put(137, new int[]{137, 23, 0b11111111111111111011010}); // 137
                put(138, new int[]{138, 23, 0b11111111111111111011011}); // 138
                put(139, new int[]{139, 23, 0b11111111111111111011100}); // 139
                put(140, new int[]{140, 23, 0b11111111111111111011101}); // 140
                put(141, new int[]{141, 23, 0b11111111111111111011110}); // 141
                put(142, new int[]{142, 24, 0b111111111111111111101011}); // 142
                put(143, new int[]{143, 23, 0b11111111111111111011111}); // 143
                put(144, new int[]{144, 24, 0b111111111111111111101100}); // 144
                put(145, new int[]{145, 24, 0b111111111111111111101101}); // 145
                put(146, new int[]{146, 22, 0b1111111111111111010111}); // 146
                put(147, new int[]{147, 23, 0b11111111111111111100000}); // 147
                put(148, new int[]{148, 24, 0b111111111111111111101110}); // 148
                put(149, new int[]{149, 23, 0b11111111111111111100001}); // 149
                put(150, new int[]{150, 23, 0b11111111111111111100010}); // 150
                put(151, new int[]{151, 23, 0b11111111111111111100011}); // 151
                put(152, new int[]{152, 23, 0b11111111111111111100100}); // 152
                put(153, new int[]{153, 21, 0b111111111111111011100}); // 153
                put(154, new int[]{154, 22, 0b1111111111111111011000}); // 154
                put(155, new int[]{155, 23, 0b11111111111111111100101}); // 155
                put(156, new int[]{156, 22, 0b1111111111111111011001}); // 156
                put(157, new int[]{157, 23, 0b11111111111111111100110}); // 157
                put(158, new int[]{158, 23, 0b11111111111111111100111}); // 158
                put(159, new int[]{159, 24, 0b111111111111111111101111}); // 159
                put(160, new int[]{160, 22, 0b1111111111111111011010}); // 160
                put(161, new int[]{161, 21, 0b111111111111111011101}); // 161
                put(162, new int[]{162, 20, 0b11111111111111101001}); // 162
                put(163, new int[]{163, 22, 0b1111111111111111011011}); // 163
                put(164, new int[]{164, 22, 0b1111111111111111011100}); // 164
                put(165, new int[]{165, 23, 0b11111111111111111101000}); // 165
                put(166, new int[]{166, 23, 0b11111111111111111101001}); // 166
                put(167, new int[]{167, 21, 0b111111111111111011110}); // 167
                put(168, new int[]{168, 23, 0b11111111111111111101010}); // 168
                put(169, new int[]{169, 22, 0b1111111111111111011101}); // 169
                put(170, new int[]{170, 22, 0b1111111111111111011110}); // 170
                put(171, new int[]{171, 24, 0b111111111111111111110000}); // 171
                put(172, new int[]{172, 21, 0b111111111111111011111}); // 172
                put(173, new int[]{173, 22, 0b1111111111111111011111}); // 173
                put(174, new int[]{174, 23, 0b11111111111111111101011}); // 174
                put(175, new int[]{175, 23, 0b11111111111111111101100}); // 175
                put(176, new int[]{176, 21, 0b111111111111111100000}); // 176
                put(177, new int[]{177, 21, 0b111111111111111100001}); // 177
                put(178, new int[]{178, 22, 0b1111111111111111100000}); // 178
                put(179, new int[]{179, 21, 0b111111111111111100010}); // 179
                put(180, new int[]{180, 23, 0b11111111111111111101101}); // 180
                put(181, new int[]{181, 22, 0b1111111111111111100001}); // 181
                put(182, new int[]{182, 23, 0b11111111111111111101110}); // 182
                put(183, new int[]{183, 23, 0b11111111111111111101111}); // 183
                put(184, new int[]{184, 20, 0b11111111111111101010}); // 184
                put(185, new int[]{185, 22, 0b1111111111111111100010}); // 185
                put(186, new int[]{186, 22, 0b1111111111111111100011}); // 186
                put(187, new int[]{187, 22, 0b1111111111111111100100}); // 187
                put(188, new int[]{188, 23, 0b11111111111111111110000}); // 188
                put(189, new int[]{189, 22, 0b1111111111111111100101}); // 189
                put(190, new int[]{190, 22, 0b1111111111111111100110}); // 190
                put(191, new int[]{191, 23, 0b11111111111111111110001}); // 191
                put(192, new int[]{192, 26, 0b11111111111111111111100000}); // 192
                put(193, new int[]{193, 26, 0b11111111111111111111100001}); // 193
                put(194, new int[]{194, 20, 0b11111111111111101011}); // 194
                put(195, new int[]{195, 19, 0b1111111111111110001}); // 195
                put(196, new int[]{196, 22, 0b1111111111111111100111}); // 196
                put(197, new int[]{197, 23, 0b11111111111111111110010}); // 197
                put(198, new int[]{198, 22, 0b1111111111111111101000}); // 198
                put(199, new int[]{199, 25, 0b1111111111111111111101100}); // 199
                put(200, new int[]{200, 26, 0b11111111111111111111100010}); // 200
                put(201, new int[]{201, 26, 0b11111111111111111111100011}); // 201
                put(202, new int[]{202, 26, 0b11111111111111111111100100}); // 202
                put(203, new int[]{203, 27, 0b111111111111111111111011110}); // 203
                put(204, new int[]{204, 27, 0b111111111111111111111011111}); // 204
                put(205, new int[]{205, 26, 0b11111111111111111111100101}); // 205
                put(206, new int[]{206, 24, 0b111111111111111111110001}); // 206
                put(207, new int[]{207, 25, 0b1111111111111111111101101}); // 207
                put(208, new int[]{208, 19, 0b1111111111111110010}); // 208
                put(209, new int[]{209, 21, 0b111111111111111100011}); // 209
                put(210, new int[]{210, 26, 0b11111111111111111111100110}); // 210
                put(211, new int[]{211, 27, 0b111111111111111111111100000}); // 211
                put(212, new int[]{212, 27, 0b111111111111111111111100001}); // 212
                put(213, new int[]{213, 26, 0b11111111111111111111100111}); // 213
                put(214, new int[]{214, 27, 0b111111111111111111111100010}); // 214
                put(215, new int[]{215, 24, 0b111111111111111111110010}); // 215
                put(216, new int[]{216, 21, 0b111111111111111100100}); // 216
                put(217, new int[]{217, 21, 0b111111111111111100101}); // 217
                put(218, new int[]{218, 26, 0b11111111111111111111101000}); // 218
                put(219, new int[]{219, 26, 0b11111111111111111111101001}); // 219
                put(220, new int[]{220, 28, 0b1111111111111111111111111101}); // 220
                put(221, new int[]{221, 27, 0b111111111111111111111100011}); // 221
                put(222, new int[]{222, 27, 0b111111111111111111111100100}); // 222
                put(223, new int[]{223, 27, 0b111111111111111111111100101}); // 223
                put(224, new int[]{224, 20, 0b11111111111111101100}); // 224
                put(225, new int[]{225, 24, 0b111111111111111111110011}); // 225
                put(226, new int[]{226, 20, 0b11111111111111101101}); // 226
                put(227, new int[]{227, 21, 0b111111111111111100110}); // 227
                put(228, new int[]{228, 22, 0b1111111111111111101001}); // 228
                put(229, new int[]{229, 21, 0b111111111111111100111}); // 229
                put(230, new int[]{230, 21, 0b111111111111111101000}); // 230
                put(231, new int[]{231, 23, 0b11111111111111111110011}); // 231
                put(232, new int[]{232, 22, 0b1111111111111111101010}); // 232
                put(233, new int[]{233, 22, 0b1111111111111111101011}); // 233
                put(234, new int[]{234, 25, 0b1111111111111111111101110}); // 234
                put(235, new int[]{235, 25, 0b1111111111111111111101111}); // 235
                put(236, new int[]{236, 24, 0b111111111111111111110100}); // 236
                put(237, new int[]{237, 24, 0b111111111111111111110101}); // 237
                put(238, new int[]{238, 26, 0b11111111111111111111101010}); // 238
                put(239, new int[]{239, 23, 0b11111111111111111110100}); // 239
                put(240, new int[]{240, 26, 0b11111111111111111111101011}); // 240
                put(241, new int[]{241, 27, 0b111111111111111111111100110}); // 241
                put(242, new int[]{242, 26, 0b11111111111111111111101100}); // 242
                put(243, new int[]{243, 26, 0b11111111111111111111101101}); // 243
                put(244, new int[]{244, 27, 0b111111111111111111111100111}); // 244
                put(245, new int[]{245, 27, 0b111111111111111111111101000}); // 245
                put(246, new int[]{246, 27, 0b111111111111111111111101001}); // 246
                put(247, new int[]{247, 27, 0b111111111111111111111101010}); // 247
                put(248, new int[]{248, 27, 0b111111111111111111111101011}); // 248
                put(249, new int[]{249, 28, 0b1111111111111111111111111110}); // 249
                put(250, new int[]{250, 27, 0b111111111111111111111101100}); // 250
                put(251, new int[]{251, 27, 0b111111111111111111111101101}); // 251
                put(252, new int[]{252, 27, 0b111111111111111111111101110}); // 252
                put(253, new int[]{253, 27, 0b111111111111111111111101111}); // 253
                put(254, new int[]{254, 27, 0b111111111111111111111110000}); // 254
                put(255, new int[]{255, 26, 0b11111111111111111111101110}); // 255
                put(256, new int[]{256, 30, 0b111111111111111111111111111111}); // EOS  256
            }
        });
        static final Huffman.HTree root = buildTree(null, null, dictionary, new HashSet<Integer>());

        @Override
        public Map<Integer, int[]> getDictionary() {
            return dictionary;
        }

        @Override
        public Huffman.HTree getRoot() {
            return root;
        }

    }

    static enum HPACK {
        headerName,
        headerNameLen,
        headerNameValue,
        headerValueLen,
        headerValue
    }

    Map<String, String[]> headers = new LinkedHashMap<String, String[]>();

    // dynamic table
    String[][] dynamicTable = new String[100][];
    int dynamicTablePos = 0;

    // state
    HPACK hpack = HPACK.headerName;
    boolean indexedHeader = false;
    long hpackNum = 0;
    int hpackNumC = 0;
    byte[] hval = new byte[1024 * 16];
    int hvalPos = 0;

    String hname = null;
    String hvalue = null;
    Huffman.Decoder huffDecoder = null;
    Huffman.Encoder huffEncoder = null;

    public HPack() {
    }

    public void add(ByteBuffer... bbs) throws IOException {
        if (bbs != null) {
            for (ByteBuffer bb : bbs) {
                if (bb == null || !bb.hasRemaining()) {
                    continue;
                }
                while (bb.hasRemaining()) {
                    byte b = bb.get();
                    if (DEBUG) {
                        System.out.println("-- " + hpack + "/" + indexedHeader + ", " + hpackNum + "/" + hpackNumC + "  " + hvalPos + " 0x" + Integer.toHexString(0xFF & b) + "  '" + (char) b + "'");
                    }
                    switch (hpack) {
                        case headerName:
                            if ((b & 0x40) == 0x40) {
                                // indexed literal - add to table!
                                indexedHeader = true;
                                int hidx = (0x3f & b);
                                if (hidx == 0) {
                                    hpack = HPACK.headerNameLen;
                                } else {
                                    if (hidx > staticTable.length) {
                                        hidx = hidx - staticTable.length;
                                        hname = dynamicTable[hidx][0];
                                        if (DEBUG) {
                                            System.out.println("  HNAME=" + hname);
                                        }
                                        hvalue = dynamicTable[hidx][1];
                                    } else {
                                        hname = staticTable[hidx][0];
                                        if (DEBUG) {
                                            System.out.println("  HNAME=" + hname);
                                        }
                                        hvalue = staticTable[hidx][1];
                                        if (DEBUG) {
                                            System.out.println("  HVALUE=" + hvalue);
                                        }
                                    }
                                    hpack = HPACK.headerValueLen;
                                }
                            } else if ((b & 0x10) == 0x10) {
                                // non-indexed literal
                                indexedHeader = false;
                                hpack = HPACK.headerNameLen;
                            } else {
                                // indexed / static
                                int hidx = b & 0x7F;
                                if (hidx > staticTable.length) {
                                    indexedHeader = true;
                                    hidx = hidx - staticTable.length;
                                    hidx = hidx - staticTable.length;
                                    hname = dynamicTable[hidx][0];
                                    if (DEBUG) {
                                        System.out.println("  HNAME=" + hname);
                                    }
                                    hvalue = dynamicTable[hidx][1];
                                    if (DEBUG) {
                                        System.out.println("  HVALUE=" + hvalue);
                                    }
                                } else {
                                    indexedHeader = false;
                                    hname = staticTable[hidx][0];
                                    if (DEBUG) {
                                        System.out.println("  HNAME=" + hname);
                                    }
                                    hvalue = staticTable[hidx][1];
                                    if (DEBUG) {
                                        System.out.println("  HVALUE=" + hvalue);
                                    }
                                    if ((0x80 & b) == 0x80) {
                                        headers.put(hname, new String[]{hvalue});
                                        hname = null;
                                        hvalue = null;
                                    };
                                }
                                if (hname != null) {
                                    hpack = HPACK.headerValueLen;
                                }
                                //throw new IOException("Unrecognized header name: 0x" + Integer.toHexString(b));
                            }
                            break;
                        case headerNameLen:
                            if (hpackNum == 0 && (0xFF & b) < 0b11111) {
                                hpackNum = 0x1F & b;
                                hpack = HPACK.headerNameValue;
                            }
                            if (hpackNum == 0 && (0b11111 & b) == 0b11111) {
                                hpackNum = 0b11111;
                                hvalPos = 0;
                                hpackNumC = 1;
                            } else if ((0x80 & b) == 0) {
                                hpackNum = (0x7F & b) << (7 * hpackNumC);
                                hvalPos = 0;
                                hpack = HPACK.headerNameValue;
                            } else {
                                hpackNum = (0x7F & b) << (7 * hpackNumC++);
                            }
                            break;
                        case headerNameValue:
                            if (hvalPos < hpackNum) {
                                hval[hvalPos++] = b;
                            }
                            if (hvalPos == hpackNum) {
                                hname = new String(hval, 0, (int) hpackNum);
                                hpackNum = 0;
                                hpack = HPACK.headerValueLen;
                                if (DEBUG) {
                                    System.out.println("  HNAME=" + hname);
                                }
                            }
                            break;
                        case headerValueLen:
                            if (hpackNum == 0) {
                                if ((b & 0x80) != 0) {
                                    huffDecoder = new HPackHuffman().getDecoder();
                                } else {
                                    huffDecoder = null;
                                }
                            }
                            if (hpackNum == 0 && (0x3F & b) < 0b11111) {
                                hpackNum = 0x3F & b;
                                hvalPos = 0;
                                hpack = HPACK.headerValue;
                            } else if (hpackNum == 0 && (0b11111 & b) == 0b11111) {
                                hpackNum = 0b11111;
                                hvalPos = 0;
                                hpackNumC = 1;
                            } else if ((0x80 & b) == 0) {
                                hpackNum = (0x7F & b) << (7 * hpackNumC);
                                hvalPos = 0;
                                hpack = HPACK.headerValue;
                            } else {
                                hpackNum = (0x3F & b) << (7 * hpackNumC++);
                            }
                            if (HPACK.headerValue == hpack) {
                                if (huffDecoder != null) {
                                    huffDecoder.reset(); // hpackNum?
                                }
                            }
                            break;
                        case headerValue:
                            if (hvalPos < hpackNum) {
                                if (huffDecoder == null) {
                                    hval[hvalPos++] = b;
                                } else {
                                    huffDecoder.add(b);
                                    hvalPos++;
                                }
                            }
                            if (hvalPos == hpackNum) {
                                if (huffDecoder != null) {
                                    huffDecoder.close();
                                    hvalue = new String(huffDecoder.getValue(), "ISO-8859-1");
                                    huffDecoder = null;
                                } else {
                                    hvalue = new String(hval, 0, (int) hpackNum);
                                }
                                hpackNum = 0;
                                hpack = HPACK.headerName;
                                if (DEBUG) {
                                    System.out.println("  HVALUE=" + hvalue);
                                }
                                headers.put(hname, new String[]{hvalue});
                                if (indexedHeader) {
                                    if (dynamicTablePos == dynamicTable.length) {
                                        dynamicTable = Arrays.copyOf(dynamicTable, dynamicTable.length + 100);
                                    }
                                    dynamicTable[dynamicTablePos] = new String[]{hname, hvalue};
                                    dynamicTablePos++;
                                }
                                hname = null;
                                hvalue = null;
                            }
                            break;
                    }

                }
            }
        }
    }

    public void close() throws IOException {
    }

    public ByteBuffer[] get() throws IOException {
        Collection<ByteBuffer> r = new ArrayList<ByteBuffer>();

        return r.toArray(new ByteBuffer[r.size()]);
    }

    public static void main(String... args) throws Exception {

        String text = "   4882 6402 5885 aec3 771a 4b61 96d0 7abe | H.d.X...w.Ka..z.\n"
                + "   9410 54d4 44a8 2005 9504 0b81 66e0 82a6 | ..T.D. .....f...\n"
                + "   2d1b ff6e 919d 29ad 1718 63c7 8f0b 97c8 | -..n..)...c.....\n"
                + "   e9ae 82ae 43d3                          | ....C.";

        if (1 == 0) {
            text = "   400a 6375 7374 6f6d 2d6b 6579 0d63 7573 | @.custom-key.cus\n"
                    + "   746f 6d2d 6865 6164 6572                | tom-header";
        }
        if (1 == 0) {
            text += "\n040c 2f73 616d 706c 652f 7061 7468      | ../sample/path";
        }
        if (1 == 0) {
            text += "\n   1008 7061 7373 776f 7264 0673 6563 7265 | ..password.secre\n"
                    + "   74                                      | t";
        }

        if (1 == 0) {
            text += "\n8286 8441 0f77 7777 2e65 7861 6d70 6c65 | ...A.www.example\n"
                    + "   2e63 6f6d                               | .com";
        }

        if (1 == 0) {
            text = "   4803 3330 3258 0770 7269 7661 7465 611d | H.302X.privatea.\n"
                    + "   4d6f 6e2c 2032 3120 4f63 7420 3230 3133 | Mon, 21 Oct 2013\n"
                    + "   2032 303a 3133 3a32 3120 474d 546e 1768 |  20:13:21 GMTn.h\n"
                    + "   7474 7073 3a2f 2f77 7777 2e65 7861 6d70 | ttps://www.examp\n"
                    + "   6c65 2e63 6f6d                          | le.com"
                    + "\n   1008 7061 7373 776f 7264 0673 6563 7265 | ..password.secre\n"
                    + "   74                                      | t";
        }

        if (1 == 0) {
            text = ""
                    + "   8286 8441 8cf1 e3c2 e5f2 3a6b a0ab 90f4 | ...A......:k....\n"
                    + "   ff                                      | ." //                +"\n  8286 84be 5886 a8eb 1064 9cbf           | ....X....d.."
                    //                                + "\n   8287 85bf 4088 25a8 49e9 5ba9 7d7f 8925 | ....@.%.I.[.}..%\n"
                    //                                + "   a849 e95b b8e8 b4bf                     | .I.[...."
                    ;
        }
        byte[] buf = new byte[1024];
        int pos = 0;
        for (String s : text.split("\n")) {
            if (s.trim().isEmpty()) {
                continue;
            }
            s = s.substring(0, s.indexOf("|")).trim();
            for (String s0 : s.split(" ")) {
                buf[pos++] = (byte) (0xFF & Integer.parseInt(s0.substring(0, 2), 16));
                if (s0.length() > 3) {
                    buf[pos++] = (byte) (0xFF & Integer.parseInt(s0.substring(2, 4), 16));
                }
            }
        }
        buf = Arrays.copyOf(buf, pos);

        HPack hp = new HPack();
        //hp.DEBUG = true;
        hp.add(ByteBuffer.wrap(buf));

        System.out.println("\n------------------------------------------- INPUT:\n" + text + "\n-------------------------------------------");

        System.out.println("Headers: " + hp.headers.size());
        for (String hn : hp.headers.keySet()) {
            System.out.print("  " + hn + ": ");
            String[] hv = hp.headers.get(hn);
            for (String s : hv) {
                System.out.print(" " + s);
            }
            System.out.println();
        }
        System.out.println("Dynamic table: " + hp.dynamicTablePos);
        for (int i = 0; i < hp.dynamicTablePos; i++) {
            String hn = hp.dynamicTable[i][0];
            String hv = hp.dynamicTable[i][1];
            System.out.println("  " + i + ": " + hn + ": " + hv);
        }

    }
}
